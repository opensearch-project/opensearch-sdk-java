/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.11.0" apply false
    id 'jacoco'
}


ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}


apply plugin: 'application'
apply from: 'gradle/formatting.gradle'
apply plugin: 'maven-publish'

// Temporary to keep "gradle run" working
// TODO: change this to an extension designed for testing instead of duplicating a sample
// https://github.com/opensearch-project/opensearch-sdk-java/issues/175
mainClassName = 'org.opensearch.sdk.sample.helloworld.HelloWorldExtension'


group 'org.opensearch.sdk'
version '1.0.0-SNAPSHOT'


publishing {
    publications {
        group = "org.opensearch"
        version = "1.0.0-SNAPSHOT"
        mavenJava(MavenPublication) {
            from components.java
        }
        sourceCompatibility = 11
        targetCompatibility = 11
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://d1nvenhzbhpy0q.cloudfront.net/snapshots/lucene/"}
    mavenCentral()
}

configurations {
  requireJavadoc
}

dependencies {

    def log4jVersion = "2.19.0"
    def jacksonDatabindVersion = "2.12.6.1"
    def opensearchVersion = "3.0.0-SNAPSHOT"
    def junit5Version = "5.9.1"

    implementation("org.opensearch:opensearch:${opensearchVersion}")
    implementation("org.opensearch.plugin:transport-netty4-client:${opensearchVersion}")
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '${log4jVersion}'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '${log4jVersion}'
    implementation("org.opensearch.client:opensearch-rest-client:${opensearchVersion}")
    implementation("org.opensearch.client:opensearch-java:${opensearchVersion}")
    implementation "io.netty:netty-all:4.1.73.Final"
    implementation "org.apache.lucene:lucene-core:9.4.0-snapshot-ddf0d0a"
    testCompileOnly ("junit:junit:4.13.2") {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
    implementation 'javax.xml.bind:jaxb-api:2.2.2'
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatabindVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:${junit5Version}'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:${junit5Version}'
    testImplementation("org.opensearch.test:framework:${opensearchVersion}")
    requireJavadoc "org.plumelib:require-javadoc:1.0.4"
}

// this task tests for the presence of javadocs but not the content/tags
task requireJavadoc(type: JavaExec) {
  group = 'Documentation'
  description = 'Ensures that Javadoc documentation exists.'
  mainClass = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java"
  // javadocs on private methods optional
  args "--dont-require-private=true"
  // javadocs on trivial getters/setters optional
  args "--dont-require-trivial-properties"
}
check.dependsOn requireJavadoc

// this task checks the content/tags of existing javadocs
task javadocStrict(type: Javadoc) {
  group = 'Documentation'
  description = 'Run Javadoc in strict mode: with -Xdoclint:all, on all members.'
  source = sourceSets.main.allJava
  classpath = sourceSets.main.runtimeClasspath
  options.addStringOption('Xdoclint:all', '-quiet')
  options.memberLevel = JavadocMemberLevel.PRIVATE
}
check.dependsOn javadocStrict

// this task runs the helloworld sample extension
task helloWorld(type: JavaExec) {
  group = 'Execution'
  description = 'Run HelloWorld Extension.'
  mainClass = 'org.opensearch.sdk.sample.helloworld.HelloWorldExtension'
  classpath = sourceSets.main.runtimeClasspath
}

test {
    useJUnitPlatform()
    jvmArgs '--enable-preview'
    systemProperty 'tests.security.manager', 'false'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    jacoco {
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}
