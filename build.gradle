/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

import java.nio.file.Files
import org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestFramework

plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.18.0" apply false
    id 'jacoco'
    id "com.form.diff-coverage" version "0.9.5"
    // for javadocs and checks spotless doesn't do
    id 'checkstyle'
}


ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}


apply plugin: 'application'
apply from: 'gradle/formatting.gradle'
apply plugin: 'maven-publish'

// Temporary to keep "gradle run" working
// TODO: change this to an extension designed for testing instead of duplicating a sample
// https://github.com/opensearch-project/opensearch-sdk-java/issues/175
mainClassName = 'org.opensearch.sdk.sample.helloworld.HelloWorldExtension'


group 'org.opensearch.sdk'
version '1.0.0-SNAPSHOT'

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        group = "${group}"
        version = "${version}"
        mavenJava(MavenPublication) {
            from components.java
        }
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    repositories {
        maven {
            name = "Snapshots" //  optional target repository name
            url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username "$System.env.SONATYPE_USERNAME"
                password "$System.env.SONATYPE_PASSWORD"
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://d1nvenhzbhpy0q.cloudfront.net/snapshots/lucene/"}
}

dependencies {

    def opensearchVersion = "2.+"
    def opensearchJavaClientVersion = "2.1.0-SNAPSHOT"
    def log4jVersion = "2.20.0"
    def nettyVersion = "4.1.92.Final"
    def jacksonDatabindVersion = "2.15.0"
    def guavaVersion = "31.1-jre"
    def guiceVersion = "5.1.0"
    def junit4Version = "4.13.2"
    def junit5Version = "5.9.3"
    def junitPlatform = "1.9.3"
    def jaxbVersion = "2.3.1"

    implementation("org.opensearch:opensearch:${opensearchVersion}")
    implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
    implementation("org.opensearch.client:opensearch-rest-high-level-client:${opensearchVersion}")
    implementation("org.opensearch.client:opensearch-rest-client:${opensearchVersion}")
    implementation("org.opensearch.client:opensearch-java:${opensearchJavaClientVersion}")
    implementation("org.opensearch.plugin:transport-netty4-client:${opensearchVersion}")
    implementation("io.netty:netty-all:${nettyVersion}")
    testCompileOnly("junit:junit:${junit4Version}") {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
    implementation("javax.xml.bind:jaxb-api:${jaxbVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonDatabindVersion}")
    constraints {
        implementation("com.google.guava:guava:${guavaVersion}") {
            because 'versions below 30.0 have active CVE'
        }
    }
    implementation("com.google.inject:guice:${guiceVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junit5Version}")
    testImplementation("org.opensearch.test:framework:${opensearchVersion}")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatform}")
}

// this task runs the helloworld sample extension
task helloWorld(type: JavaExec) {
    group = 'Execution'
    description = 'Run HelloWorld Extension.'
    mainClass = 'org.opensearch.sdk.sample.helloworld.HelloWorldExtension'
    classpath = sourceSets.main.runtimeClasspath
}

test {
    useJUnitPlatform()
    jvmArgs '--enable-preview'
    systemProperty 'tests.security.manager', 'false'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    jacoco {
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

// Get uncommitted files via git diff
// https://github.com/form-com/diff-coverage-gradle/issues/73
ext.createDiffFile = { ->
    def file = Files.createTempFile(URLEncoder.encode(project.name, 'UTF-8'), '.diff').toFile()
    def diffBase = 'refs/remotes/origin/main'
    // Only run locally
    if (!System.getenv('CI')) {
        file.withOutputStream { out ->
            exec {
                commandLine 'git', 'diff', '--no-color', '--minimal', diffBase
                standardOutput = out
            }
        }
    }
    return file
}

diffCoverageReport {
    afterEvaluate {
        diffSource.file = createDiffFile()
    }

    // View report at build/reports/jacoco/diffCoverage/html/index.html
    reports {
        html = true
    }

    violationRules {
        minBranches = 0.60
        minLines = 0.75
        failOnViolation = true
    }
}
