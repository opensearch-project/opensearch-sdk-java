/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

package org.opensearch.sdk.handlers;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.opensearch.common.bytes.BytesReference;
import org.opensearch.extensions.rest.ExtensionRestRequest;
import org.opensearch.extensions.rest.ExtensionRestResponse;
import org.opensearch.extensions.rest.RestExecuteOnExtensionResponse;
import org.opensearch.http.HttpRequest;
import org.opensearch.http.HttpResponse;
import org.opensearch.rest.RestRequest;
import org.opensearch.rest.RestRequest.Method;
import org.opensearch.rest.RestStatus;
import org.opensearch.sdk.ExtensionRestHandler;
import org.opensearch.sdk.ExtensionsRunner;
import org.opensearch.sdk.SDKNamedXContentRegistry;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.opensearch.sdk.ExtensionRestPathRegistry;

import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Collections.emptyMap;
import static java.util.Collections.emptyList;
import static org.opensearch.rest.BytesRestResponse.TEXT_CONTENT_TYPE;
import static org.opensearch.rest.RestStatus.NOT_FOUND;

/**
 * This class handles the request from OpenSearch to a {@link ExtensionsRunner#startTransportService(TransportService transportService)} call.
 */

public class ExtensionsRestRequestHandler {
    private static final Logger logger = LogManager.getLogger(ExtensionsRestRequestHandler.class);
    private final ExtensionRestPathRegistry extensionRestPathRegistry;
    private final SDKNamedXContentRegistry sdkNamedXContentRegistry;

    /**
     * Instantiate this class with an existing registry
     *
     * @param restPathRegistry The ExtensionsRunnerer's REST path registry
     * @param sdkNamedXContentRegistry
     */
    public ExtensionsRestRequestHandler(ExtensionRestPathRegistry restPathRegistry, SDKNamedXContentRegistry sdkNamedXContentRegistry) {
        this.sdkNamedXContentRegistry = sdkNamedXContentRegistry;
        this.extensionRestPathRegistry = restPathRegistry;
    }

    /**
     * Handles a request from OpenSearch to execute a REST request on the extension.
     *
     * @param request  The REST request to execute.
     * @return A response acknowledging the request.
     */
    public RestExecuteOnExtensionResponse handleRestExecuteOnExtensionRequest(ExtensionRestRequest request) {

        ExtensionRestHandler restHandler = extensionRestPathRegistry.getHandler(request.method(), request.path());
        if (restHandler == null) {
            return new RestExecuteOnExtensionResponse(
                NOT_FOUND,
                TEXT_CONTENT_TYPE,
                String.join(" ", "No handler for", request.method().name(), request.path()).getBytes(UTF_8),
                emptyMap(),
                emptyList(),
                false
            );
        }

        // Temporary code to create a RestRequest from the ExtensionRestRequest before header code added
        // Remove this and replace with SDKRestRequest being generated by this PR:
        // https://github.com/opensearch-project/opensearch-sdk-java/pull/605
        RestRequest restRequest = RestRequest.request(sdkNamedXContentRegistry.getRegistry(), new HttpRequest() {

            @Override
            public Method method() {
                return request.method();
            }

            @Override
            public String uri() {
                // path strips query off uri but probably want to pass the whole uri
                // this will make the request behave as expected (without query params)
                return request.path();
            }

            @Override
            public BytesReference content() {
                return request.content();
            }

            @Override
            public Map<String, List<String>> getHeaders() {
                // This effectively recreates the only header we need right now
                // PR replacing this will pass more headers
                return Map.of("Content-Type", List.of(request.getXContentType().mediaType()));
            }

            @Override
            public List<String> strictCookies() {
                return Collections.emptyList();
            }

            @Override
            public HttpVersion protocolVersion() {
                return null;
            }

            @Override
            public HttpRequest removeHeader(String header) {
                // we don't use
                return null;
            }

            @Override
            public HttpResponse createResponse(RestStatus status, BytesReference content) {
                return null;
            }

            @Override
            public Exception getInboundException() {
                return null;
            }

            @Override
            public void release() {}

            @Override
            public HttpRequest releaseAndCopy() {
                return null;
            }
        }, null);

        // Get response from extension
        ExtensionRestResponse response = restHandler.handleRequest(request);
        logger.info("Sending extension response to OpenSearch: " + response.status());
        return new RestExecuteOnExtensionResponse(
            response.status(),
            response.contentType(),
            BytesReference.toBytes(response.content()),
            response.getHeaders(),
            response.getConsumedParams(),
            response.isContentConsumed()
        );
    }

}
